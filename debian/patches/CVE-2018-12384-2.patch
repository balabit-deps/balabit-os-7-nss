Backport of:

# HG changeset patch
# User Martin Thomson <martin.thomson@gmail.com>
# Date 1535421480 -36000
# Node ID f182a11fbe532b1b9edb76a57a0d4609d9d8ab75
# Parent  a4de0e81d1ccdb153817fbeda86d2182eec6f726
Bug 1483128 - Test that randoms aren't fixed, r=ekr

We can't easily test that ClientHello.random and ServerHello.random are truly
random in these tests, but we can catch mistakes the likes of which produced
this bug.  This just runs a few handshakes and tests that none of the random
values are equal to any other, or they are equal to zero.

Index: nss-3.35/nss/gtests/ssl_gtest/ssl_loopback_unittest.cc
===================================================================
--- nss-3.35.orig/nss/gtests/ssl_gtest/ssl_loopback_unittest.cc	2018-12-12 17:11:53.235987950 -0500
+++ nss-3.35/nss/gtests/ssl_gtest/ssl_loopback_unittest.cc	2018-12-12 17:11:53.231987937 -0500
@@ -488,6 +488,51 @@ TEST_F(TlsConnectTest, OneNRecordSplitti
   EXPECT_EQ(ExpectedCbcLen(20), records->record(2).buffer.len());
 }
 
+// We can't test for randomness easily here, but we can test that we don't
+// produce a zero value, or produce the same value twice.  There are 5 values
+// here: two ClientHello.random, two ServerHello.random, and one zero value.
+// Matrix them and fail if any are the same.
+TEST_P(TlsConnectGeneric, CheckRandoms) {
+  ConfigureSessionCache(RESUME_NONE, RESUME_NONE);
+
+  static const size_t random_len = 32;
+  uint8_t crandom1[random_len], srandom1[random_len];
+  uint8_t z[random_len] = {0};
+
+  auto ch = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_client_hello);
+  client_->SetTlsRecordFilter(ch);
+  auto sh = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_server_hello);
+  server_->SetTlsRecordFilter(sh);
+  Connect();
+  ASSERT_TRUE(ch->buffer().len() > (random_len + 2));
+  ASSERT_TRUE(sh->buffer().len() > (random_len + 2));
+  memcpy(crandom1, ch->buffer().data() + 2, random_len);
+  memcpy(srandom1, sh->buffer().data() + 2, random_len);
+  EXPECT_NE(0, memcmp(crandom1, srandom1, random_len));
+  EXPECT_NE(0, memcmp(crandom1, z, random_len));
+  EXPECT_NE(0, memcmp(srandom1, z, random_len));
+
+  Reset();
+  ch = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_client_hello);
+  client_->SetTlsRecordFilter(ch);
+  sh = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_server_hello);
+  server_->SetTlsRecordFilter(sh);
+  Connect();
+  ASSERT_TRUE(ch->buffer().len() > (random_len + 2));
+  ASSERT_TRUE(sh->buffer().len() > (random_len + 2));
+  const uint8_t* crandom2 = ch->buffer().data() + 2;
+  const uint8_t* srandom2 = sh->buffer().data() + 2;
+
+  EXPECT_NE(0, memcmp(crandom2, srandom2, random_len));
+  EXPECT_NE(0, memcmp(crandom2, z, random_len));
+  EXPECT_NE(0, memcmp(srandom2, z, random_len));
+
+  EXPECT_NE(0, memcmp(crandom1, crandom2, random_len));
+  EXPECT_NE(0, memcmp(crandom1, srandom2, random_len));
+  EXPECT_NE(0, memcmp(srandom1, crandom2, random_len));
+  EXPECT_NE(0, memcmp(srandom1, srandom2, random_len));
+}
+
 INSTANTIATE_TEST_CASE_P(
     GenericStream, TlsConnectGeneric,
     ::testing::Combine(TlsConnectTestBase::kTlsVariantsStream,
Index: nss-3.35/nss/gtests/ssl_gtest/ssl_v2_client_hello_unittest.cc
===================================================================
--- nss-3.35.orig/nss/gtests/ssl_gtest/ssl_v2_client_hello_unittest.cc	2018-12-12 17:11:53.235987950 -0500
+++ nss-3.35/nss/gtests/ssl_gtest/ssl_v2_client_hello_unittest.cc	2018-12-12 17:13:16.124279122 -0500
@@ -328,6 +328,32 @@ TEST_P(SSLv2ClientHelloTest, RequireSafe
   Connect();
 }
 
+TEST_P(SSLv2ClientHelloTest, CheckServerRandom) {
+  ConfigureSessionCache(RESUME_NONE, RESUME_NONE);
+  SetAvailableCipherSuite(TLS_DHE_RSA_WITH_AES_128_CBC_SHA);
+
+  static const size_t random_len = 32;
+  uint8_t srandom1[random_len];
+  uint8_t z[random_len] = {0};
+
+  auto sh = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_server_hello);
+  server_->SetTlsRecordFilter(sh);
+  Connect();
+  ASSERT_TRUE(sh->buffer().len() > (random_len + 2));
+  memcpy(srandom1, sh->buffer().data() + 2, random_len);
+  EXPECT_NE(0, memcmp(srandom1, z, random_len));
+
+  Reset();
+  sh = std::make_shared<TlsInspectorRecordHandshakeMessage>(ssl_hs_server_hello);
+  server_->SetTlsRecordFilter(sh);
+  Connect();
+  ASSERT_TRUE(sh->buffer().len() > (random_len + 2));
+  const uint8_t* srandom2 = sh->buffer().data() + 2;
+
+  EXPECT_NE(0, memcmp(srandom2, z, random_len));
+  EXPECT_NE(0, memcmp(srandom1, srandom2, random_len));
+}
+
 // Connect to the server with TLS 1.1, signalling that this is a fallback from
 // a higher version. As the server doesn't support anything higher than TLS 1.1
 // it must accept the connection.
